pragma solidity ^0.4.23;

contract GlobalSelling{

    
    address public sender;
    address public reciever;
   uint public recvEther;
   string public productName;
   string public symbol;
   uint8 public decimals;
   string public supplierName;
    string public supplierAddress;
   uint256 public totalSupply;

    uint public sellingPrice;
    
    // struct seller {
    // string name;
    // string email;
    // string supplierAddress;
    // string companyName;
    // uint256 totalSupply;
    // }

   mapping (address => uint256) public balanceOf;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event ConfirmedPayment(address addr, uint escrowValue);

   constructor(uint256 _supply, string _productName, string _symbol, uint8 _decimals, string _supplierName, string _supplierAddress, uint256 _totalSupply){
      balanceOf[msg.sender] = _supply;
      productName = _productName;
      symbol = _symbol;
      decimals = _decimals;
      supplierName = _supplierName;
      supplierAddress = _supplierAddress;
      totalSupply = _supply;
   }
   
   function transfer(address _to, uint256 _value){
      if (balanceOf[msg.sender] < _value) 
      require (msg.value >= _value);

      if (balanceOf[_to] + _value < balanceOf[_to])
      require (balanceOf[_to] + _value >= balanceOf[_to]);

      balanceOf[msg.sender]  -= _value;
      balanceOf[_to] += _value;

      emit Transfer(msg.sender, _to, _value);      

   }
   
   function () payable {
        sender = msg.sender;
        recvEther += msg.value;
        ConfirmedPayment(msg.sender, msg.value);
   }
   
}

